@page "/"
@using System.Text.RegularExpressions
@using Foresite.Services
@using Foresite.Components.Shared
@inject WhazzupService whazzup
@inject NavigationManager nav
@inject CifpService cifp
@using Microsoft.AspNetCore.Components.QuickGrid


<PageTitle>Foresite Home</PageTitle>

<Scope></Scope>
<div>
	@foreach (var pilots in (IEnumerable<Pilot>[])[_pilots.Where(p => p.flightPlan!.IsUsDeparture()), _pilots.Where(p => p.flightPlan!.IsUsArrival())])
	{
		<QuickGrid Items="pilots.OrderByDescending(p => cifp.Cifp.Aerodromes[p.flightPlan!.IsUsDeparture() ? p.flightPlan!.departureId! : p.flightPlan!.arrivalId!].Location.Latitude).AsQueryable()">
			<PropertyColumn Title="VID" Property="@(p => p.userId)" Sortable="true" />
			<PropertyColumn Title="Departure" Property="@(p => p.flightPlan!.departureId)" Sortable="true" />
			<PropertyColumn Title="Arrival" Property="@(p => p.flightPlan!.arrivalId)" Sortable="true" />
			<PropertyColumn Title="Callsign" Property="@(p => p.callsign)" Sortable="true" />
		</QuickGrid>
	}
</div>

<p>There are @_pilots.Length pilots connected</p>


@code
{
	Pilot[] _pilots => whazzup.Data?.clients.pilots ?? [];

	protected override void OnAfterRender(bool firstRender)
	{
		if (!firstRender)
			return;

		whazzup.DataUpdated += async _ => await InvokeAsync(StateHasChanged);
	}
}