@page "/"
@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@using CIFPReader
@using System.Collections.Immutable
@inject IJSRuntime js
@inject CifpService cifp
@inject NavigationManager nav
@inject WhazzupService whazzup
@inject ArcGisService arcgis

<div class="background" @onmousemove="MouseMove">
	<BECanvas Height="@_canvasHeight" Width="@_canvasWidth" @ref="_dynamicCanvas" />
	<BECanvas Height="@_canvasHeight" Width="@_canvasWidth" @ref="_staticCanvas" />
</div>

<div class="foreground">
	@foreach (var pilot in whazzup.Data?.clients.pilots ?? [])
	{
		if (pilot.lastTrack is Lasttrack lt)
		{
			if (EnforceBoxes(WorldToScreen(new(lt.latitude, lt.longitude))) is not (double, double) localPos)
				continue;


			<div class="pilot pilot-@(pilot.Category.ToString().ToLowerInvariant())" style="left: @($"{localPos.x:0}px"); top: @($"{localPos.y:0}px");">
				<div class="marker" style="transform: translate(-50%, -50%) rotate(@(lt.heading)deg);">↑</div>
				<div class="infoblock@(localPos.y < 150 ? " infoblock-below" : "")">
					@pilot.callsign<br />
					@if (pilot.flightPlan is Flightplan fpl)
					{
						<span>@fpl.departureId -&gt; @fpl.arrivalId<br /></span>
					}
					@if (pilot.lastTrack is Lasttrack ltr)
					{
						<span>
							@System.Text.Json.JsonSerializer.Serialize(ltr.state)[1..^1]<br />
							@ltr.groundSpeed kts<br />
							@(ltr.onGround ? "SFC" : ltr.altitude < 18000 ? $"{ltr.altitude} ft" : $"FL {ltr.altitude / 100:000}")<br />
						</span>
					}
				</div>
				<div class="path">
					<svg height="@_canvasHeight" width="@_canvasWidth" xmlns="http://www.w3.org/2000/svg">
						@if (pilot.flightPlan?.departureId is string dpId && cifp.Cifp.Aerodromes.Find(dpId) is Aerodrome dpAd && EnforceBoxes(WorldToScreen(dpAd.Location.GetCoordinate())) is (double, double) dpScreenPos)
						{
							<circle r="5" cx="@((int)dpScreenPos.x)" cy="@((int)dpScreenPos.y)" class="path-departure" />
						}

						@if (pilot.flightPlan?.arrivalId is string arId && cifp.Cifp.Aerodromes.Find(arId) is Aerodrome arAd && EnforceBoxes(WorldToScreen(arAd.Location.GetCoordinate())) is (double, double) arScreenPos)
						{
							<circle r="5" cx="@((int)arScreenPos.x)" cy="@((int)arScreenPos.y)" class="path-arrival" />
						}

						@foreach (var subPath in pilot.Route.Aggregate((((double x, double y)[][])[[]]).ToImmutableList(), (s, i) => (i is not null && EnforceBoxes(WorldToScreen(i.GetCoordinate())) is (double, double) c) ? s.SetItem(s.Count - 1, [.. s[^1], c]) : s.Add([])))
						{
							<polyline points="@(string.Join(" ", subPath.Select(sp => $"{sp.x:0},{sp.y:0}")))" class="pathline" style="fill: none; stroke: green; stroke-width: 3;" />
						}
					</svg>
				</div>
			</div>
		}
	}
</div>

<div class="header">
	<ForesiteAuthorizeView>
		<SignedIn>
			<button @onclick="@(() => nav.NavigateNewTab(js, context.ProfileUrl))">@context.DisplayName</button>
		</SignedIn>
		<NotSignedIn>
			<button class="attention" @onclick="nav.Authenticate">Sign In</button>
		</NotSignedIn>
	</ForesiteAuthorizeView>
</div>

<HeadContent>
	<style>
		body {
		overflow: hidden;
		background-color: black;
		}
	</style>
</HeadContent>

@code {
	private BECanvasComponent? _staticCanvas, _dynamicCanvas;
	private int _canvasHeight = 400;
	private int _canvasWidth = 600;

	const float ALASKA_SCALE = 0.65f, ALASKA_STRETCH = 1.5f, HAWAII_SCALE = 3.0f;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		int newWidth = await js.InvokeAsync<int>("getWidth", []),
			newHeight = await js.InvokeAsync<int>("getHeight", []);

		bool redraw = false;

		if (_canvasWidth != newWidth || _canvasHeight != newHeight)
		{
			(_canvasWidth, _canvasHeight) = (newWidth, newHeight);
			await InvokeAsync(StateHasChanged);
			redraw = true;
		}

		_alaskaTopLeft = WorldToScreen(new(73, -175));
		_alaskaBottomRight = WorldToScreen(new(52, -130));
		_alaskaSize = ((_alaskaBottomRight.x - _alaskaTopLeft.x) * ALASKA_SCALE, (_alaskaBottomRight.y - _alaskaTopLeft.y) * ALASKA_SCALE * ALASKA_STRETCH);

		_hawaiiTopLeft = WorldToScreen(new(23, -161));
		_hawaiiBottomRight = WorldToScreen(new(18, -154));
		_hawaiiSize = ((_hawaiiBottomRight.x - _hawaiiTopLeft.x) * HAWAII_SCALE, (_hawaiiBottomRight.y - _hawaiiTopLeft.y) * HAWAII_SCALE);

		if (redraw)
		{
			await DrawArtccBoundariesAsync();
			await DrawCoastlinesAsync();
		}

		if (_staticCanvas is null || _setup)
			return;

		_setup = true;
		whazzup.DataUpdated += async _ => await InvokeAsync(StateHasChanged);
	}

	protected async Task DrawArtccBoundariesAsync()
	{
		var ctx = await _dynamicCanvas.CreateCanvas2DAsync();
		await ctx.BeginBatchAsync();
		await ctx.SetStrokeStyleAsync("aquamarine");
		await ctx.BeginPathAsync();

		foreach (var boundary in
			arcgis.Boundaries
				.SelectMany(b => b.Boundaries)
				.Select(b => b.Select(p => EnforceBoxes(WorldToScreen(p))).Where(p => p is not null).Cast<(double x, double y)>().ToArray())
				.Where(b => b.Length > 1))
		{
			await ctx.MoveToAsync(boundary[0].x, boundary[0].y);

			foreach (var pt in boundary[1..].Append(boundary[0]))
				await ctx.LineToAsync(pt.x, pt.y);
		}
		
		await ctx.StrokeAsync();
		await ctx.EndBatchAsync();
	}

	protected async Task DrawCoastlinesAsync()
	{
		var coastlines = cifp.Coastlines.Where(line => line.Any(p => p.Latitude > 20 && p.Longitude < -30)).Select(l => l.Select(WorldToScreen).ToArray()).ToArray();
		var ctx = await _staticCanvas.CreateCanvas2DAsync();
		await ctx.BeginBatchAsync();
		await ctx.SetStrokeStyleAsync("white");
		await ctx.BeginPathAsync();

		foreach (var coastline in coastlines)
		{
			if (coastline.Length < 3) continue;
			bool lastSkipped = true;

			foreach (var point in coastline)
			{
				if (lastSkipped)
				{
					lastSkipped = false;

					if (EnforceBoxes(point) is (double x, double y))
						await ctx.MoveToAsync(x, y);
					else
						lastSkipped = true;
				}
				else
				{
					lastSkipped = false;

					if (EnforceBoxes(point) is (double x, double y))
						await ctx.LineToAsync(x, y);
					else
						lastSkipped = true;
				}
			}
		}

		await ctx.MoveToAsync(0, 0); await ctx.LineToAsync(_alaskaSize.x, 0); await ctx.LineToAsync(_alaskaSize.x, _alaskaSize.y); await ctx.LineToAsync(0, _alaskaSize.y); await ctx.LineToAsync(0, 0);
		await ctx.MoveToAsync(0, _canvasHeight); await ctx.LineToAsync(0, _canvasHeight - _hawaiiSize.y); await ctx.LineToAsync(_hawaiiSize.x, _canvasHeight - _hawaiiSize.y); await ctx.LineToAsync(_hawaiiSize.x, _canvasHeight); await ctx.LineToAsync(0, _canvasHeight);

		await ctx.StrokeAsync();
		await ctx.EndBatchAsync();
	}

	(double x, double y) _lastMousePosition = (0, 0);
	Coordinate _lastMouseCoord = new();
	protected void MouseMove(MouseEventArgs me)
	{
		_lastMousePosition = (me.ClientX, me.ClientY);
		_lastMouseCoord = ScreenToWorld(me.ClientX, me.ClientY);
	}

	(double x, double y) _alaskaTopLeft = (0, 0), _alaskaBottomRight = (0, 0);
	(double x, double y) _alaskaSize = (0, 0);
	(double x, double y) _hawaiiTopLeft = (0, 0), _hawaiiBottomRight = (0, 0);
	(double x, double y) _hawaiiSize = (0, 0);

	bool InAlaska((double x, double y) point) =>
		point.x < _alaskaBottomRight.x && point.y < _alaskaBottomRight.y &&
		point.x > _alaskaTopLeft.x && point.y > _alaskaTopLeft.y;

	bool InHawaii((double x, double y) point) =>
		point.x < _hawaiiBottomRight.x && point.y < _hawaiiBottomRight.y &&
		point.x > _hawaiiTopLeft.x && point.y > _hawaiiTopLeft.y;

	bool InProtectedArea((double x, double y) point) =>
		(point.x < _alaskaSize.x && point.y < _alaskaSize.y) ||
		(point.x < _hawaiiSize.x && point.y > _canvasHeight - _hawaiiSize.y);

	(double x, double y)? EnforceBoxes((double x, double y) point) =>
		InAlaska(point) ? ((point.x - _alaskaTopLeft.x) * ALASKA_SCALE, (point.y - _alaskaTopLeft.y) * ALASKA_SCALE * ALASKA_STRETCH)
		: InHawaii(point) ? ((point.x - _hawaiiTopLeft.x) * HAWAII_SCALE, (point.y - _hawaiiTopLeft.y) * HAWAII_SCALE + (_canvasHeight - _hawaiiSize.y))
		: InProtectedArea(point) ? ((double x, double y)?)null
		: point.x > _canvasWidth * 1.5 ? null
		: point.y > _canvasHeight * 1.5 ? null
		: point;

	private bool _setup = false;
	private Coordinate _centerpoint = new(43, -110);
	private const double DEG_TO_RAD = Math.PI / 180;
	private const double PI_OVER_FOUR = Math.PI / 4;
	private (double x, double y) WorldToScreen(Coordinate c)
	{
		c -= _centerpoint;
		double radius = _canvasWidth * 4 / Math.Tau;
		double lat = DEG_TO_RAD * Math.Clamp((double)c.Latitude, -89, 89);
		double lon = DEG_TO_RAD * (double)c.Longitude;
		double intermediateY = Math.Log(Math.Tan(PI_OVER_FOUR + lat / 2));

		return (
			x: lon * radius + _canvasWidth / 2,
			y: _canvasHeight / 2 - (intermediateY * radius)
		);
	}

	private Coordinate ScreenToWorld(double x, double y)
	{
		if (InProtectedArea((x, y)))
		{
			if (y > _alaskaSize.y)
			{
				// Hawaii.
				x = x / HAWAII_SCALE + _hawaiiTopLeft.x;
				y = (y - (_canvasHeight - _hawaiiSize.y)) / HAWAII_SCALE + _hawaiiTopLeft.y;
			}
			else
			{
				// Alaska
				x = x / ALASKA_SCALE + _alaskaTopLeft.x;
				y = y / ALASKA_SCALE / ALASKA_STRETCH + _alaskaTopLeft.y;
			}
		}

		double radius = _canvasWidth * 4 / Math.Tau;
		double intermediateY = ((_canvasHeight / 2) - y) / radius;
		double lat = (Math.Atan(Math.Exp(intermediateY)) - PI_OVER_FOUR) * 2;
		double lon = (x - _canvasWidth / 2) / radius;

		return new Coordinate((decimal)(lat / DEG_TO_RAD), (decimal)(lon / DEG_TO_RAD)) + _centerpoint;
	}
}